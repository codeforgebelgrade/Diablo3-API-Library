using System;
using System.Net;

namespace Codeforge.Diablo3Info
{
    /// <summary>
    /// Sends HTTP request to Blizzard Diablo API
    /// </summary>
    internal static class RequestHandler
    {
        /// <summary>
        /// Makes the actual API call
        /// </summary>
        /// <param name="requestUrl">URL string generated by the CreateRequest methods</param>
        /// <returns></returns>
        internal static HttpWebResponse MakeRequest(string requestUrl)
        {
            //exceptions are described here: https://msdn.microsoft.com/en-us/library/bw00b1dc%28v=vs.110%29.aspx
            HttpWebRequest request = WebRequest.Create(requestUrl) as HttpWebRequest;
            return request.GetResponse() as HttpWebResponse;
        }

        /// <summary>
        /// Creates string that represents full URL path for Character request
        /// </summary>
        /// <param name="battleTag">Player's battle tag</param>
        /// <param name="characterId">Id of the player's character, obtained from player's profile information</param>
        /// <param name="locale">chosen language</param>
        /// <returns></returns>
        internal static HttpWebResponse CreateCharacterRequest(RequestParameters.REGIONS region, string battleTag, string characterId, string locale, string apiKeyValue)
        {
            string requestUtl = GetRegionHost(region) + Resources.CAREER_PROFILE + battleTag + "/hero/" + characterId + RequestParameters.LOCALE + locale + RequestParameters.APIKEY + apiKeyValue;
            return MakeRequest(requestUtl);
        }

        /// <summary>
        /// Creates string that represents full URL path for Profile request
        /// </summary>
        /// <param name="region">Player's region</param>
        /// <param name="battleTag">Player's battle tag</param>
        /// <param name="locale">Language code (locale).</param>
        /// <returns></returns>
        internal static HttpWebResponse CreateProfileRequest(RequestParameters.REGIONS region, string battleTag, string locale, string apiKeyValue)
        {
            string requestUtl = GetRegionHost(region) + Resources.CAREER_PROFILE + battleTag + "/" + RequestParameters.LOCALE + locale + RequestParameters.APIKEY + apiKeyValue;
            return MakeRequest(requestUtl);
        }

        /// <summary>
        /// Creates string that represents full URL path for Artisan request
        /// </summary>
        /// <param name="battleTag"></param>
        /// <param name="characterId"></param>
        /// <returns></returns>
        internal static HttpWebResponse CreateArtisanRequest(RequestParameters.REGIONS region, string artisan, string locale, string apiKeyValue)
        {
            string requestUtl = GetRegionHost(region) + Resources.ARTISAN_DATA + artisan + RequestParameters.LOCALE + locale + RequestParameters.APIKEY + apiKeyValue;
            return MakeRequest(requestUtl);
        }

        /// <summary>
        /// Creates string that represents full URL path for Follower request
        /// </summary>
        /// <param name="battleTag"></param>
        /// <param name="characterId"></param>
        /// <returns></returns>
        internal static HttpWebResponse CreateFollowerRequest(RequestParameters.REGIONS region, string follower, string locale, string apiKeyValue)
        {
            string requestUtl = GetRegionHost(region) + Resources.FOLLOWER_DATA + follower + RequestParameters.LOCALE + locale + RequestParameters.APIKEY + apiKeyValue;
            return MakeRequest(requestUtl);
        }

        private static string GetRegionHost(RequestParameters.REGIONS region)
        {
            switch (region)
            {
                case RequestParameters.REGIONS.EU:
                    return RegionHosts.EUROPE;
                case RequestParameters.REGIONS.US:
                    return RegionHosts.US;
                case RequestParameters.REGIONS.KOREA:
                    return RegionHosts.KOREA;
                case RequestParameters.REGIONS.CHINA:
                    return RegionHosts.CHINA;
                case RequestParameters.REGIONS.TAIWAN:
                    return RegionHosts.TAIWAN;
                case RequestParameters.REGIONS.SEA:
                    return RegionHosts.SEA;
                default:
                    throw new ArgumentOutOfRangeException(region.ToString());
            }
        }
    }
}
